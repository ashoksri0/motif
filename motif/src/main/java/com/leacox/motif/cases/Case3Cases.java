// /*
//  * Copyright (C) 2015 John Leacox
//  *
//  * Licensed under the Apache License, Version 2.0 (the "License");
//  * you may not use this file except in compliance with the License.
//  * You may obtain a copy of the License at
//  *
//  * http://www.apache.org/licenses/LICENSE-2.0
//  *
//  * Unless required by applicable law or agreed to in writing, software
//  * distributed under the License is distributed on an "AS IS" BASIS,
//  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  * See the License for the specific language governing permissions and
//  * limitations under the License.
//  */
//
// Generated by Motif. Do Not Edit!
//

package com.leacox.motif.cases;

import com.leacox.motif.MatchesAny;
import com.leacox.motif.MatchesExact;
import com.leacox.motif.caseclass.Case3;
import com.leacox.motif.extract.DecomposableMatchBuilder0;
import com.leacox.motif.extract.DecomposableMatchBuilder1;
import com.leacox.motif.extract.DecomposableMatchBuilder2;
import com.leacox.motif.extract.DecomposableMatchBuilder3;
import com.leacox.motif.extract.matchers.ArgumentMatchers;
import com.leacox.motif.extract.matchers.Matcher;
import com.leacox.motif.extract.util.Lists;
import com.leacox.motif.tuple.Tuple2;
import com.leacox.motif.tuple.Tuple3;

import java.util.List;

/**
 * Motif cases for matching a {@link Case3}.
 */
public final class Case3Cases {
  private Case3Cases() {
  }

  /**
   * Matches a case class of three elements.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C> DecomposableMatchBuilder0<T> case3(
      Class<T> clazz, MatchesExact<A> a, MatchesExact<B> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.eq(b.t), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder0<T>(matchers, new Case3FieldExtractor<>(clazz));
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C> DecomposableMatchBuilder1<T, C> case3(
      Class<T> clazz, MatchesExact<A> a, MatchesExact<B> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<T, C>(matchers, 2, new Case3FieldExtractor<>(clazz));
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EC extends C> DecomposableMatchBuilder0<T> case3(
      Class<T> clazz, MatchesExact<A> a, MatchesExact<B> b, DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<T, EC>(matchers, 2, new Case3FieldExtractor<>(clazz))
        .decomposeFirst(c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EC extends C, C1> DecomposableMatchBuilder1<T, C1> case3(
      Class<T> clazz, MatchesExact<A> a, MatchesExact<B> b, DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<T, EC>(matchers, 2, new Case3FieldExtractor<>(clazz))
        .decomposeFirst(c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code c} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EC extends C, C1, C2> DecomposableMatchBuilder2<T, C1, C2> case3(
      Class<T> clazz, MatchesExact<A> a, MatchesExact<B> b,
      DecomposableMatchBuilder2<EC, C1, C2> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<T, EC>(matchers, 2, new Case3FieldExtractor<>(clazz))
        .decomposeFirst(c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code c} value is decomposed to 3.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EC extends C, C1, C2, C3> DecomposableMatchBuilder3<T, C1, C2, C3> case3(
      Class<T> clazz, MatchesExact<A> a, MatchesExact<B> b,
      DecomposableMatchBuilder3<EC, C1, C2, C3> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<T, EC>(matchers, 2, new Case3FieldExtractor<>(clazz))
        .decomposeFirst(c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C> DecomposableMatchBuilder1<T, B> case3(
      Class<T> clazz, MatchesExact<A> a, MatchesAny<B> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder1<T, B>(matchers, 1, new Case3FieldExtractor<>(clazz));
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is extracted and the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C> DecomposableMatchBuilder2<T, B, C> case3(
      Class<T> clazz, MatchesExact<A> a, MatchesAny<B> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, B, C>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz));
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is extracted and the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EC extends C> DecomposableMatchBuilder1<T, B> case3(
      Class<T> clazz, MatchesExact<A> a, MatchesAny<B> b, DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, B, EC>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeSecond(c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is extracted and the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EC extends C, C1> DecomposableMatchBuilder2<T, B, C1> case3(
      Class<T> clazz, MatchesExact<A> a, MatchesAny<B> b, DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, B, EC>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeSecond(c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is extracted and the {@code c} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EC extends C, C1, C2> DecomposableMatchBuilder3<T, B, C1, C2> case3(
      Class<T> clazz, MatchesExact<A> a, MatchesAny<B> b, DecomposableMatchBuilder2<EC, C1, C2> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, B, EC>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeSecond(c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B> DecomposableMatchBuilder0<T> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder0<EB> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder1<T, EB>(matchers, 1, new Case3FieldExtractor<>(clazz))
        .decomposeFirst(b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 0 and the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B> DecomposableMatchBuilder1<T, C> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder0<EB> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EB, C>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirst(b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 0 and the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, EC extends C> DecomposableMatchBuilder0<T> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EB, EC>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 0 and the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, EC extends C, C1> DecomposableMatchBuilder1<T, C1> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EB, EC>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 0 and the {@code c} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, EC extends C, C1, C2> DecomposableMatchBuilder2<T, C1, C2> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder2<EC, C1, C2> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EB, EC>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 0 and the {@code c} value is decomposed to 3.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, EC extends C, C1, C2, C3> DecomposableMatchBuilder3<T, C1, C2, C3> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder3<EC, C1, C2, C3> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EB, EC>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1> DecomposableMatchBuilder1<T, B1> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder1<EB, B1> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder1<T, EB>(matchers, 1, new Case3FieldExtractor<>(clazz))
        .decomposeFirst(b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 1 and the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1> DecomposableMatchBuilder2<T, B1, C> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder1<EB, B1> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EB, C>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirst(b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 1 and the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1, EC extends C> DecomposableMatchBuilder1<T, B1> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder1<EB, B1> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EB, EC>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 1 and the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1, EC extends C, C1> DecomposableMatchBuilder2<T, B1, C1> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder1<EB, B1> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EB, EC>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 1 and the {@code c} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1, EC extends C, C1, C2> DecomposableMatchBuilder3<T, B1, C1, C2> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder1<EB, B1> b,
      DecomposableMatchBuilder2<EC, C1, C2> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EB, EC>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1, B2> DecomposableMatchBuilder2<T, B1, B2> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder2<EB, B1, B2> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder1<T, EB>(matchers, 1, new Case3FieldExtractor<>(clazz))
        .decomposeFirst(b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 2 and the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1, B2> DecomposableMatchBuilder3<T, B1, B2, C> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder2<EB, B1, B2> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EB, C>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirst(b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 2 and the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1, B2, EC extends C> DecomposableMatchBuilder2<T, B1, B2> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder2<EB, B1, B2> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EB, EC>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 2 and the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1, B2, EC extends C, C1> DecomposableMatchBuilder3<T, B1, B2, C1> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder2<EB, B1, B2> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EB, EC>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 3.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1, B2, B3> DecomposableMatchBuilder3<T, B1, B2, B3> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder3<EB, B1, B2, B3> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder1<T, EB>(matchers, 1, new Case3FieldExtractor<>(clazz))
        .decomposeFirst(b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code b} value is decomposed to 3 and the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1, B2, B3, EC extends C> DecomposableMatchBuilder3<T, B1, B2, B3> case3(
      Class<T> clazz, MatchesExact<A> a, DecomposableMatchBuilder3<EB, B1, B2, B3> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.eq(a.t), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EB, EC>(
        matchers, Tuple2.of(1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C> DecomposableMatchBuilder1<T, A> case3(
      Class<T> clazz, MatchesAny<A> a, MatchesExact<B> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder1<T, A>(matchers, 0, new Case3FieldExtractor<>(clazz));
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C> DecomposableMatchBuilder2<T, A, C> case3(
      Class<T> clazz, MatchesAny<A> a, MatchesExact<B> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, A, C>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz));
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EC extends C> DecomposableMatchBuilder1<T, A> case3(
      Class<T> clazz, MatchesAny<A> a, MatchesExact<B> b, DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, A, EC>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeSecond(c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EC extends C, C1> DecomposableMatchBuilder2<T, A, C1> case3(
      Class<T> clazz, MatchesAny<A> a, MatchesExact<B> b, DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, A, EC>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeSecond(c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code c} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EC extends C, C1, C2> DecomposableMatchBuilder3<T, A, C1, C2> case3(
      Class<T> clazz, MatchesAny<A> a, MatchesExact<B> b, DecomposableMatchBuilder2<EC, C1, C2> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, A, EC>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeSecond(c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C> DecomposableMatchBuilder2<T, A, B> case3(
      Class<T> clazz, MatchesAny<A> a, MatchesAny<B> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, A, B>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz));
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is extracted and the {@code c} value
   * is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C> DecomposableMatchBuilder3<T, A, B, C> case3(
      Class<T> clazz, MatchesAny<A> a, MatchesAny<B> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, A, B, C>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz));
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is extracted and the {@code c} value
   * is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EC extends C> DecomposableMatchBuilder2<T, A, B> case3(
      Class<T> clazz, MatchesAny<A> a, MatchesAny<B> b, DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, A, B, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz)).decomposeThird(c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is extracted and the {@code c} value
   * is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EC extends C, C1> DecomposableMatchBuilder3<T, A, B, C1> case3(
      Class<T> clazz, MatchesAny<A> a, MatchesAny<B> b, DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, A, B, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz)).decomposeThird(c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B> DecomposableMatchBuilder1<T, A> case3(
      Class<T> clazz, MatchesAny<A> a, DecomposableMatchBuilder0<EB> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, A, EB>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeSecond(b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is decomposed to 0 and the {@code
   * c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B> DecomposableMatchBuilder2<T, A, C> case3(
      Class<T> clazz, MatchesAny<A> a, DecomposableMatchBuilder0<EB> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, A, EB, C>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz)).decomposeSecond(b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is decomposed to 0 and the {@code
   * c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, EC extends C> DecomposableMatchBuilder1<T, A> case3(
      Class<T> clazz, MatchesAny<A> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, A, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeSecondAndThird(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is decomposed to 0 and the {@code
   * c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, EC extends C, C1> DecomposableMatchBuilder2<T, A, C1> case3(
      Class<T> clazz, MatchesAny<A> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, A, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeSecondAndThird(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is decomposed to 0 and the {@code
   * c} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, EC extends C, C1, C2> DecomposableMatchBuilder3<T, A, C1, C2> case3(
      Class<T> clazz, MatchesAny<A> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder2<EC, C1, C2> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, A, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeSecondAndThird(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1> DecomposableMatchBuilder2<T, A, B1> case3(
      Class<T> clazz, MatchesAny<A> a, DecomposableMatchBuilder1<EB, B1> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, A, EB>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeSecond(b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is decomposed to 1 and the {@code
   * c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1> DecomposableMatchBuilder3<T, A, B1, C> case3(
      Class<T> clazz, MatchesAny<A> a, DecomposableMatchBuilder1<EB, B1> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, A, EB, C>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz)).decomposeSecond(b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is decomposed to 1 and the {@code
   * c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1, EC extends C> DecomposableMatchBuilder2<T, A, B1> case3(
      Class<T> clazz, MatchesAny<A> a, DecomposableMatchBuilder1<EB, B1> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, A, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeSecondAndThird(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is decomposed to 1 and the {@code
   * c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1, EC extends C, C1> DecomposableMatchBuilder3<T, A, B1, C1> case3(
      Class<T> clazz, MatchesAny<A> a, DecomposableMatchBuilder1<EB, B1> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, A, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeSecondAndThird(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1, B2> DecomposableMatchBuilder3<T, A, B1, B2> case3(
      Class<T> clazz, MatchesAny<A> a, DecomposableMatchBuilder2<EB, B1, B2> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, A, EB>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeSecond(b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} is extracted and the {@code b} value is decomposed to 2 and the {@code
   * c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EB extends B, B1, B2, EC extends C> DecomposableMatchBuilder3<T, A, B1, B2> case3(
      Class<T> clazz, MatchesAny<A> a, DecomposableMatchBuilder2<EB, B1, B2> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, A, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeSecondAndThird(b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A> DecomposableMatchBuilder0<T> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, MatchesExact<B> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder1<T, EA>(matchers, 0, new Case3FieldExtractor<>(clazz))
        .decomposeFirst(a);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A> DecomposableMatchBuilder1<T, C> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, MatchesExact<B> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EA, C>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeFirst(a);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EC extends C> DecomposableMatchBuilder0<T> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, MatchesExact<B> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EA, EC>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EC extends C, C1> DecomposableMatchBuilder1<T, C1> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, MatchesExact<B> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EA, EC>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code c} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EC extends C, C1, C2> DecomposableMatchBuilder2<T, C1, C2> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, MatchesExact<B> b,
      DecomposableMatchBuilder2<EC, C1, C2> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EA, EC>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code c} value is decomposed to 3.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EC extends C, C1, C2, C3> DecomposableMatchBuilder3<T, C1, C2, C3> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, MatchesExact<B> b,
      DecomposableMatchBuilder3<EC, C1, C2, C3> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EA, EC>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A> DecomposableMatchBuilder1<T, B> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, MatchesAny<B> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, EA, B>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeFirst(a);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is extracted and the {@code
   * c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A> DecomposableMatchBuilder2<T, B, C> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, MatchesAny<B> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, B, C>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirst(a);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is extracted and the {@code
   * c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EC extends C> DecomposableMatchBuilder1<T, B> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, MatchesAny<B> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, B, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndThird(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is extracted and the {@code
   * c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EC extends C, C1> DecomposableMatchBuilder2<T, B, C1> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, MatchesAny<B> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, B, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndThird(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is extracted and the {@code
   * c} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EC extends C, C1, C2> DecomposableMatchBuilder3<T, B, C1, C2> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, MatchesAny<B> b,
      DecomposableMatchBuilder2<EC, C1, C2> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, B, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndThird(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B> DecomposableMatchBuilder0<T> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder0<EB> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, EA, EB>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 0 and
   * the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B> DecomposableMatchBuilder1<T, C> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder0<EB> b,
      MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, C>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 0 and
   * the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, EC extends C> DecomposableMatchBuilder0<T> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 0 and
   * the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, EC extends C, C1> DecomposableMatchBuilder1<T, C1> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 0 and
   * the {@code c} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, EC extends C, C1, C2> DecomposableMatchBuilder2<T, C1, C2> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder2<EC, C1, C2> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 0 and
   * the {@code c} value is decomposed to 3.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, EC extends C, C1, C2, C3> DecomposableMatchBuilder3<T, C1, C2, C3> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder3<EC, C1, C2, C3> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, B1> DecomposableMatchBuilder1<T, B1> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder1<EB, B1> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, EA, EB>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 1 and
   * the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, B1> DecomposableMatchBuilder2<T, B1, C> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder1<EB, B1> b,
      MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, C>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 1 and
   * the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, B1, EC extends C> DecomposableMatchBuilder1<T, B1> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder1<EB, B1> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 1 and
   * the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, B1, EC extends C, C1> DecomposableMatchBuilder2<T, B1, C1> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder1<EB, B1> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 1 and
   * the {@code c} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, B1, EC extends C, C1, C2> DecomposableMatchBuilder3<T, B1, C1, C2> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder1<EB, B1> b,
      DecomposableMatchBuilder2<EC, C1, C2> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, B1, B2> DecomposableMatchBuilder2<T, B1, B2> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder2<EB, B1, B2> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, EA, EB>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 2 and
   * the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, B1, B2> DecomposableMatchBuilder3<T, B1, B2, C> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder2<EB, B1, B2> b,
      MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, C>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 2 and
   * the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, B1, B2, EC extends C> DecomposableMatchBuilder2<T, B1, B2> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder2<EB, B1, B2> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 2 and
   * the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, B1, B2, EC extends C, C1> DecomposableMatchBuilder3<T, B1, B2, C1> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder2<EB, B1, B2> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 3.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, B1, B2, B3> DecomposableMatchBuilder3<T, B1, B2, B3> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder3<EB, B1, B2, B3> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, EA, EB>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 0 and the {@code b} value is decomposed to 3 and
   * the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, EB extends B, B1, B2, B3, EC extends C> DecomposableMatchBuilder3<T, B1, B2, B3> case3(
      Class<T> clazz, DecomposableMatchBuilder0<EA> a, DecomposableMatchBuilder3<EB, B1, B2, B3> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1> DecomposableMatchBuilder1<T, A1> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, MatchesExact<B> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder1<T, EA>(matchers, 0, new Case3FieldExtractor<>(clazz))
        .decomposeFirst(a);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1> DecomposableMatchBuilder2<T, A1, C> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, MatchesExact<B> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EA, C>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeFirst(a);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EC extends C> DecomposableMatchBuilder1<T, A1> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, MatchesExact<B> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EA, EC>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EC extends C, C1> DecomposableMatchBuilder2<T, A1, C1> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, MatchesExact<B> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EA, EC>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code c} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EC extends C, C1, C2> DecomposableMatchBuilder3<T, A1, C1, C2> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, MatchesExact<B> b,
      DecomposableMatchBuilder2<EC, C1, C2> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EA, EC>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1> DecomposableMatchBuilder2<T, A1, B> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, MatchesAny<B> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, EA, B>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeFirst(a);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is extracted and the {@code
   * c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1> DecomposableMatchBuilder3<T, A1, B, C> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, MatchesAny<B> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, B, C>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz)).decomposeFirst(a);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is extracted and the {@code
   * c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EC extends C> DecomposableMatchBuilder2<T, A1, B> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, MatchesAny<B> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, B, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndThird(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is extracted and the {@code
   * c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EC extends C, C1> DecomposableMatchBuilder3<T, A1, B, C1> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, MatchesAny<B> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, B, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndThird(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EB extends B> DecomposableMatchBuilder1<T, A1> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, DecomposableMatchBuilder0<EB> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, EA, EB>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is decomposed to 0 and
   * the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EB extends B> DecomposableMatchBuilder2<T, A1, C> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, DecomposableMatchBuilder0<EB> b,
      MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, C>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is decomposed to 0 and
   * the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EB extends B, EC extends C> DecomposableMatchBuilder1<T, A1> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is decomposed to 0 and
   * the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EB extends B, EC extends C, C1> DecomposableMatchBuilder2<T, A1, C1> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is decomposed to 0 and
   * the {@code c} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EB extends B, EC extends C, C1, C2> DecomposableMatchBuilder3<T, A1, C1, C2> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder2<EC, C1, C2> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EB extends B, B1> DecomposableMatchBuilder2<T, A1, B1> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, DecomposableMatchBuilder1<EB, B1> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, EA, EB>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is decomposed to 1 and
   * the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EB extends B, B1> DecomposableMatchBuilder3<T, A1, B1, C> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, DecomposableMatchBuilder1<EB, B1> b,
      MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, C>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is decomposed to 1 and
   * the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EB extends B, B1, EC extends C> DecomposableMatchBuilder2<T, A1, B1> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, DecomposableMatchBuilder1<EB, B1> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is decomposed to 1 and
   * the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EB extends B, B1, EC extends C, C1> DecomposableMatchBuilder3<T, A1, B1, C1> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, DecomposableMatchBuilder1<EB, B1> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EB extends B, B1, B2> DecomposableMatchBuilder3<T, A1, B1, B2> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, DecomposableMatchBuilder2<EB, B1, B2> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, EA, EB>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 1 and the {@code b} value is decomposed to 2 and
   * the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, EB extends B, B1, B2, EC extends C> DecomposableMatchBuilder3<T, A1, B1, B2> case3(
      Class<T> clazz, DecomposableMatchBuilder1<EA, A1> a, DecomposableMatchBuilder2<EB, B1, B2> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 2.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2> DecomposableMatchBuilder2<T, A1, A2> case3(
      Class<T> clazz, DecomposableMatchBuilder2<EA, A1, A2> a, MatchesExact<B> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder1<T, EA>(matchers, 0, new Case3FieldExtractor<>(clazz))
        .decomposeFirst(a);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 2 and the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2> DecomposableMatchBuilder3<T, A1, A2, C> case3(
      Class<T> clazz, DecomposableMatchBuilder2<EA, A1, A2> a, MatchesExact<B> b, MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EA, C>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeFirst(a);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 2 and the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2, EC extends C> DecomposableMatchBuilder2<T, A1, A2> case3(
      Class<T> clazz, DecomposableMatchBuilder2<EA, A1, A2> a, MatchesExact<B> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EA, EC>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 2 and the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2, EC extends C, C1> DecomposableMatchBuilder3<T, A1, A2, C1> case3(
      Class<T> clazz, DecomposableMatchBuilder2<EA, A1, A2> a, MatchesExact<B> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EA, EC>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 2 and the {@code b} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2> DecomposableMatchBuilder3<T, A1, A2, B> case3(
      Class<T> clazz, DecomposableMatchBuilder2<EA, A1, A2> a, MatchesAny<B> b, MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, EA, B>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeFirst(a);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 2 and the {@code b} value is extracted and the {@code
   * c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2, EC extends C> DecomposableMatchBuilder3<T, A1, A2, B> case3(
      Class<T> clazz, DecomposableMatchBuilder2<EA, A1, A2> a, MatchesAny<B> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, B, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndThird(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 2 and the {@code b} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2, EB extends B> DecomposableMatchBuilder2<T, A1, A2> case3(
      Class<T> clazz, DecomposableMatchBuilder2<EA, A1, A2> a, DecomposableMatchBuilder0<EB> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, EA, EB>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 2 and the {@code b} value is decomposed to 0 and
   * the {@code c} value is extracted.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2, EB extends B> DecomposableMatchBuilder3<T, A1, A2, C> case3(
      Class<T> clazz, DecomposableMatchBuilder2<EA, A1, A2> a, DecomposableMatchBuilder0<EB> b,
      MatchesAny<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, C>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 2 and the {@code b} value is decomposed to 0 and
   * the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2, EB extends B, EC extends C> DecomposableMatchBuilder2<T, A1, A2> case3(
      Class<T> clazz, DecomposableMatchBuilder2<EA, A1, A2> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 2 and the {@code b} value is decomposed to 0 and
   * the {@code c} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2, EB extends B, EC extends C, C1> DecomposableMatchBuilder3<T, A1, A2, C1> case3(
      Class<T> clazz, DecomposableMatchBuilder2<EA, A1, A2> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder1<EC, C1> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 2 and the {@code b} value is decomposed to 1.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2, EB extends B, B1> DecomposableMatchBuilder3<T, A1, A2, B1> case3(
      Class<T> clazz, DecomposableMatchBuilder2<EA, A1, A2> a, DecomposableMatchBuilder1<EB, B1> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, EA, EB>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 2 and the {@code b} value is decomposed to 1 and
   * the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2, EB extends B, B1, EC extends C> DecomposableMatchBuilder3<T, A1, A2, B1> case3(
      Class<T> clazz, DecomposableMatchBuilder2<EA, A1, A2> a, DecomposableMatchBuilder1<EB, B1> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 3.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2, A3> DecomposableMatchBuilder3<T, A1, A2, A3> case3(
      Class<T> clazz, DecomposableMatchBuilder3<EA, A1, A2, A3> a, MatchesExact<B> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder1<T, EA>(matchers, 0, new Case3FieldExtractor<>(clazz))
        .decomposeFirst(a);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 3 and the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2, A3, EC extends C> DecomposableMatchBuilder3<T, A1, A2, A3> case3(
      Class<T> clazz, DecomposableMatchBuilder3<EA, A1, A2, A3> a, MatchesExact<B> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(b.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<T, EA, EC>(
        matchers, Tuple2.of(0, 2), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, c);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 3 and the {@code b} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2, A3, EB extends B> DecomposableMatchBuilder3<T, A1, A2, A3> case3(
      Class<T> clazz, DecomposableMatchBuilder3<EA, A1, A2, A3> a, DecomposableMatchBuilder0<EB> b,
      MatchesExact<C> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.eq(c.t));
    return new DecomposableMatchBuilder2<T, EA, EB>(
        matchers, Tuple2.of(0, 1), new Case3FieldExtractor<>(clazz)).decomposeFirstAndSecond(a, b);
  }

  /**
   * Matches a case class of three elements.
   *
   * <p>If matched, the {@code a} value is decomposed to 3 and the {@code b} value is decomposed to 0 and
   * the {@code c} value is decomposed to 0.
   *
   */
  public static <T extends Case3<A, B, C>, A, B, C, EA extends A, A1, A2, A3, EB extends B, EC extends C> DecomposableMatchBuilder3<T, A1, A2, A3> case3(
      Class<T> clazz, DecomposableMatchBuilder3<EA, A1, A2, A3> a, DecomposableMatchBuilder0<EB> b,
      DecomposableMatchBuilder0<EC> c) {
    List<Matcher<Object>> matchers =
        Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder3<T, EA, EB, EC>(
        matchers, Tuple3.of(0, 1, 2), new Case3FieldExtractor<>(clazz))
        .decomposeFirstAndSecondAndThird(a, b, c);
  }
}
