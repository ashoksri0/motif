// /*
//  * Copyright (C) 2015 John Leacox
//  *
//  * Licensed under the Apache License, Version 2.0 (the "License");
//  * you may not use this file except in compliance with the License.
//  * You may obtain a copy of the License at
//  *
//  * http://www.apache.org/licenses/LICENSE-2.0
//  *
//  * Unless required by applicable law or agreed to in writing, software
//  * distributed under the License is distributed on an "AS IS" BASIS,
//  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  * See the License for the specific language governing permissions and
//  * limitations under the License.
//  */
//
// Generated by Motif. Do Not Edit!
//
package com.leacox.motif.cases;

import com.leacox.motif.MatchesAny;
import com.leacox.motif.MatchesExact;
import com.leacox.motif.extract.DecomposableMatchBuilder0;
import com.leacox.motif.extract.DecomposableMatchBuilder1;
import com.leacox.motif.extract.DecomposableMatchBuilder2;
import com.leacox.motif.extract.DecomposableMatchBuilder3;
import com.leacox.motif.extract.matchers.ArgumentMatchers;
import com.leacox.motif.extract.matchers.Matcher;
import com.leacox.motif.extract.util.Lists;
import com.leacox.motif.tuple.Tuple2;
import java.lang.Object;
import java.util.List;

/**
 * Motif cases for matching a {@link List} with cons.
 */
public final class ListConsCases {
  private ListConsCases() {
  }

  /**
   * Matches an empty list.
   */
  public static <T> DecomposableMatchBuilder0<List<T>> nil() {
    List<Matcher<Object>> matchers = Lists.of();
    return new DecomposableMatchBuilder0<List<T>>(matchers, new ListConsNilFieldExtractor<>());
  }

  /**
   * Matches a list with exactly one element.
   */
  public static <T> DecomposableMatchBuilder0<List<T>> headNil(MatchesExact<T> head) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.eq(head.t));
    return new DecomposableMatchBuilder0<List<T>>(matchers, new ListConsHeadFieldExtractor<>());
  }

  /**
   * Matches a list with exactly one element.
   *
   * <p>If matched, the {@code head} value is extracted.
   */
  public static <T> DecomposableMatchBuilder1<List<T>, T> headNil(MatchesAny<T> head) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<List<T>, T>(matchers, 0, new ListConsHeadFieldExtractor<>());
  }

  /**
   * Matches a list with exactly one element.
   *
   * <p>If matched, the {@code head} value is decomposed to 0.
   */
  public static <T, ET extends T> DecomposableMatchBuilder0<List<T>> headNil(DecomposableMatchBuilder0<ET> head) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<List<T>, ET>(matchers, 0, new ListConsHeadFieldExtractor<>()).decomposeFirst(head);
  }

  /**
   * Matches a list with exactly one element.
   *
   * <p>If matched, the {@code head} value is decomposed to 1.
   */
  public static <T, ET extends T, A1> DecomposableMatchBuilder1<List<T>, A1> headNil(DecomposableMatchBuilder1<ET, A1> head) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<List<T>, ET>(matchers, 0, new ListConsHeadFieldExtractor<>()).decomposeFirst(head);
  }

  /**
   * Matches a list with exactly one element.
   *
   * <p>If matched, the {@code head} value is decomposed to 2.
   */
  public static <T, ET extends T, A1, A2> DecomposableMatchBuilder2<List<T>, A1, A2> headNil(DecomposableMatchBuilder2<ET, A1, A2> head) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<List<T>, ET>(matchers, 0, new ListConsHeadFieldExtractor<>()).decomposeFirst(head);
  }

  /**
   * Matches a list with exactly one element.
   *
   * <p>If matched, the {@code head} value is decomposed to 3.
   */
  public static <T, ET extends T, A1, A2, A3> DecomposableMatchBuilder3<List<T>, A1, A2, A3> headNil(DecomposableMatchBuilder3<ET, A1, A2, A3> head) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<List<T>, ET>(matchers, 0, new ListConsHeadFieldExtractor<>()).decomposeFirst(head);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   */
  public static <T> DecomposableMatchBuilder0<List<T>> headTail(MatchesExact<T> head, MatchesExact<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.eq(head.t), ArgumentMatchers.eq(tail.t));
    return new DecomposableMatchBuilder0<List<T>>(matchers, new ListConsHeadTailFieldExtractor<>());
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code tail} value is extracted.
   */
  public static <T> DecomposableMatchBuilder1<List<T>, List<T>> headTail(MatchesExact<T> head, MatchesAny<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.eq(head.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<List<T>, List<T>>(matchers, 1, new ListConsHeadTailFieldExtractor<>());
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code tail} value is decomposed to 0.
   */
  public static <T> DecomposableMatchBuilder0<List<T>> headTail(MatchesExact<T> head, DecomposableMatchBuilder0<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.eq(head.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<List<T>, List<T>>(matchers, 1, new ListConsHeadTailFieldExtractor<>()).decomposeFirst(tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code tail} value is decomposed to 1.
   */
  public static <T, B1> DecomposableMatchBuilder1<List<T>, B1> headTail(MatchesExact<T> head, DecomposableMatchBuilder1<List<T>, B1> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.eq(head.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<List<T>, List<T>>(matchers, 1, new ListConsHeadTailFieldExtractor<>()).decomposeFirst(tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code tail} value is decomposed to 2.
   */
  public static <T, B1, B2> DecomposableMatchBuilder2<List<T>, B1, B2> headTail(MatchesExact<T> head, DecomposableMatchBuilder2<List<T>, B1, B2> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.eq(head.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<List<T>, List<T>>(matchers, 1, new ListConsHeadTailFieldExtractor<>()).decomposeFirst(tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code tail} value is decomposed to 3.
   */
  public static <T, B1, B2, B3> DecomposableMatchBuilder3<List<T>, B1, B2, B3> headTail(MatchesExact<T> head, DecomposableMatchBuilder3<List<T>, B1, B2, B3> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.eq(head.t), ArgumentMatchers.any());
    return new DecomposableMatchBuilder1<List<T>, List<T>>(matchers, 1, new ListConsHeadTailFieldExtractor<>()).decomposeFirst(tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is extracted.
   */
  public static <T> DecomposableMatchBuilder1<List<T>, T> headTail(MatchesAny<T> head, MatchesExact<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(tail.t));
    return new DecomposableMatchBuilder1<List<T>, T>(matchers, 0, new ListConsHeadTailFieldExtractor<>());
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is extracted and the {@code tail} value is extracted.
   */
  public static <T> DecomposableMatchBuilder2<List<T>, T, List<T>> headTail(MatchesAny<T> head, MatchesAny<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, T, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>());
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is extracted and the {@code tail} value is decomposed to 0.
   */
  public static <T> DecomposableMatchBuilder1<List<T>, T> headTail(MatchesAny<T> head, DecomposableMatchBuilder0<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, T, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeSecond(tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is extracted and the {@code tail} value is decomposed to 1.
   */
  public static <T, B1> DecomposableMatchBuilder2<List<T>, T, B1> headTail(MatchesAny<T> head, DecomposableMatchBuilder1<List<T>, B1> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, T, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeSecond(tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is extracted and the {@code tail} value is decomposed to 2.
   */
  public static <T, B1, B2> DecomposableMatchBuilder3<List<T>, T, B1, B2> headTail(MatchesAny<T> head, DecomposableMatchBuilder2<List<T>, B1, B2> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, T, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeSecond(tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 0.
   */
  public static <T, ET extends T> DecomposableMatchBuilder0<List<T>> headTail(DecomposableMatchBuilder0<ET> head, MatchesExact<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(tail.t));
    return new DecomposableMatchBuilder1<List<T>, ET>(matchers, 0, new ListConsHeadTailFieldExtractor<>()).decomposeFirst(head);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 0 and the {@code tail} value is extracted.
   */
  public static <T, ET extends T> DecomposableMatchBuilder1<List<T>, List<T>> headTail(DecomposableMatchBuilder0<ET> head, MatchesAny<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, ET, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeFirst(head);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 0 and the {@code tail} value is decomposed to
   * 0.
   */
  public static <T, ET extends T> DecomposableMatchBuilder0<List<T>> headTail(DecomposableMatchBuilder0<ET> head, DecomposableMatchBuilder0<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, ET, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeFirstAndSecond(head, tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 0 and the {@code tail} value is decomposed to
   * 1.
   */
  public static <T, ET extends T, B1> DecomposableMatchBuilder1<List<T>, B1> headTail(DecomposableMatchBuilder0<ET> head, DecomposableMatchBuilder1<List<T>, B1> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, ET, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeFirstAndSecond(head, tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 0 and the {@code tail} value is decomposed to
   * 2.
   */
  public static <T, ET extends T, B1, B2> DecomposableMatchBuilder2<List<T>, B1, B2> headTail(DecomposableMatchBuilder0<ET> head, DecomposableMatchBuilder2<List<T>, B1, B2> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, ET, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeFirstAndSecond(head, tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 0 and the {@code tail} value is decomposed to
   * 3.
   */
  public static <T, ET extends T, B1, B2, B3> DecomposableMatchBuilder3<List<T>, B1, B2, B3> headTail(DecomposableMatchBuilder0<ET> head, DecomposableMatchBuilder3<List<T>, B1, B2, B3> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, ET, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeFirstAndSecond(head, tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 1.
   */
  public static <T, ET extends T, A1> DecomposableMatchBuilder1<List<T>, A1> headTail(DecomposableMatchBuilder1<ET, A1> head, MatchesExact<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(tail.t));
    return new DecomposableMatchBuilder1<List<T>, ET>(matchers, 0, new ListConsHeadTailFieldExtractor<>()).decomposeFirst(head);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 1 and the {@code tail} value is extracted.
   */
  public static <T, ET extends T, A1> DecomposableMatchBuilder2<List<T>, A1, List<T>> headTail(DecomposableMatchBuilder1<ET, A1> head, MatchesAny<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, ET, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeFirst(head);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 1 and the {@code tail} value is decomposed to
   * 0.
   */
  public static <T, ET extends T, A1> DecomposableMatchBuilder1<List<T>, A1> headTail(DecomposableMatchBuilder1<ET, A1> head, DecomposableMatchBuilder0<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, ET, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeFirstAndSecond(head, tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 1 and the {@code tail} value is decomposed to
   * 1.
   */
  public static <T, ET extends T, A1, B1> DecomposableMatchBuilder2<List<T>, A1, B1> headTail(DecomposableMatchBuilder1<ET, A1> head, DecomposableMatchBuilder1<List<T>, B1> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, ET, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeFirstAndSecond(head, tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 1 and the {@code tail} value is decomposed to
   * 2.
   */
  public static <T, ET extends T, A1, B1, B2> DecomposableMatchBuilder3<List<T>, A1, B1, B2> headTail(DecomposableMatchBuilder1<ET, A1> head, DecomposableMatchBuilder2<List<T>, B1, B2> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, ET, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeFirstAndSecond(head, tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 2.
   */
  public static <T, ET extends T, A1, A2> DecomposableMatchBuilder2<List<T>, A1, A2> headTail(DecomposableMatchBuilder2<ET, A1, A2> head, MatchesExact<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(tail.t));
    return new DecomposableMatchBuilder1<List<T>, ET>(matchers, 0, new ListConsHeadTailFieldExtractor<>()).decomposeFirst(head);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 2 and the {@code tail} value is extracted.
   */
  public static <T, ET extends T, A1, A2> DecomposableMatchBuilder3<List<T>, A1, A2, List<T>> headTail(DecomposableMatchBuilder2<ET, A1, A2> head, MatchesAny<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, ET, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeFirst(head);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 2 and the {@code tail} value is decomposed to
   * 0.
   */
  public static <T, ET extends T, A1, A2> DecomposableMatchBuilder2<List<T>, A1, A2> headTail(DecomposableMatchBuilder2<ET, A1, A2> head, DecomposableMatchBuilder0<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, ET, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeFirstAndSecond(head, tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 2 and the {@code tail} value is decomposed to
   * 1.
   */
  public static <T, ET extends T, A1, A2, B1> DecomposableMatchBuilder3<List<T>, A1, A2, B1> headTail(DecomposableMatchBuilder2<ET, A1, A2> head, DecomposableMatchBuilder1<List<T>, B1> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, ET, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeFirstAndSecond(head, tail);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 3.
   */
  public static <T, ET extends T, A1, A2, A3> DecomposableMatchBuilder3<List<T>, A1, A2, A3> headTail(DecomposableMatchBuilder3<ET, A1, A2, A3> head, MatchesExact<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.eq(tail.t));
    return new DecomposableMatchBuilder1<List<T>, ET>(matchers, 0, new ListConsHeadTailFieldExtractor<>()).decomposeFirst(head);
  }

  /**
   * Matches a list with a head element and a tail of remaining elements.
   *
   * <p>If matched, the {@code head} value is decomposed to 3 and the {@code tail} value is decomposed to
   * 0.
   */
  public static <T, ET extends T, A1, A2, A3> DecomposableMatchBuilder3<List<T>, A1, A2, A3> headTail(DecomposableMatchBuilder3<ET, A1, A2, A3> head, DecomposableMatchBuilder0<List<T>> tail) {
    List<Matcher<Object>> matchers = Lists.of(ArgumentMatchers.any(), ArgumentMatchers.any());
    return new DecomposableMatchBuilder2<List<T>, ET, List<T>>(matchers, Tuple2.of(0, 1), new ListConsHeadTailFieldExtractor<>()).decomposeFirstAndSecond(head, tail);
  }
}
